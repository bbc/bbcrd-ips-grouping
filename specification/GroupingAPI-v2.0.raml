#%RAML 0.8

title: Grouping
baseUri: http://example.api.com/x-ipstudio/grouping/{version}
version: v2.0
mediaType: application/json
schemas:
  - Group: !include schemas/groupingapi-v2.0-group.json
  - Package: !include schemas/groupingapi-v2.0-package.json
  - Groups: !include schemas/groupingapi-v2.0-groups.json
  - Packages: !include schemas/groupingapi-v2.0-packages.json
documentation:
  - title: Overview
    content: |
      The Grouping API provides read and write access to Groups and Packages of IP Studio resources. The API layer is intended to simplify management of multiple resources that can be logically grouped together.

      Groups are used to collect together multiple resources (e.g. sources, flows, senders, receivers, groups) of the same type in order to retain context. For example, sources corresponding to a camera can be collected as a group.

      A Group consists of a unique `id`, a `members` field (a map of named resource ids), a `resource_type` field, a `label` field, a `description` field and a `tags` field (a map between tag labels and arrays of corresponding tag values).

      In the x-ipstudio implementation, all fields are maintained by the client, excluding the group id that is generated by the server.

      Packages represent the contents of a Group between mininum (`min_ts`) and maximum (`max_ts`) TAI timestamps. A package of flows, for example, could represent the media content of a television programme. Packages with the max timestamp omitted can be used to represent live content, although live content could also be represented by an unpackaged group.

      A package consists of a `group_id`, which references the enclosed group, `min_ts` and `max_ts` timestamp fields, and `label` and `tags` fields. The `label` and `tags` fields follow the same schema as the corresponding fields found in a group.

      The Grouping API permits creation, updation and deletion of Groups and Packages. Groups and packages are accessed individually using unique ids.

      The group and package endpoints can be queried using the RQL query language.

      **Caveats**
      * Currently a PUT operation is used to update previously created Groups and Packages. In a multi-client environment this could result in race conditions when updating group members.
      In order to avoid this issue, we intend to replace the PUT method with a PATCH, however the exact semantics of how group members can be added or removed with a PATCH has yet to be agreed. This may or may not require the use of an additional sub-resource.

      * Nodes and Devices which are themselves aware of the relationships between multiple Sources, Flows etc may be better exposing groups automatically via their IS-04 Node API rather than interacting with this API given its intentional lack of a heartbeat concept. This would require an addition to that specification, but could use the same grouping structure.

/:
  displayName: Base
  get:
    description: List of paths available from this API
    responses:
      200:
        body:
          example: !include examples/groupingapi-v2.0-base-get-200.json
/groups:
  displayName: Groups
  get:
    description: List Groups
    queryParameters:
      query.rql:
        type: string
        example: query.rql=and(eq(resource_type,source),contains(tags.cameras,(cam_a,cam_b)))
        description: |
          A subset of the Resource Query Language.

          It is recommended that RQL be formatted in the normalised form as opposed to using FIQL syntax. (ie `lt(number,10)`, not `number=lt=10`)

          Where a given RQL operator is not implemented, the API responds with a 501.

      resource_type:
        type: string
        example: resource_type=flow
        description: filter by group resource type
      label:
        type: string
        example: label=camera%201b
        description: filter by group label
      description:
        type: string
        example: description=S01E11
        description: filter by group description
      tags:
        type: string
        example: tags.network=bbc_radio_one&tags.brand=annie_mac
        description: |
          Filter by group tags.
    responses:
      200:
        body:
          example: !include examples/groupingapi-v2.0-groups-get-200.json
          schema: Groups
  post:
    description: Create a Group of resources
    body:
      example: !include examples/groupingapi-v2.0-groups-post-put-request.json
      schema: !include schemas/groupingapi-v2.0-groups-post-put-request.json
    responses:
      201:
        body:
          example: !include examples/groupingapi-v2.0-group-get-200.json
        headers:
          Location:
            example: /groups/7c903667-7113-4a8f-8865-1c63f9070a9e
      400:

  /{groupId}:
    get:
      description: Get a single Group
      responses:
        200:
          body:
            example: !include examples/groupingapi-v2.0-group-get-200.json
            schema: Group
        404:
    put:
      description: Update a Group
      body:
        example: !include examples/groupingapi-v2.0-groups-post-put-request.json
        schema: !include schemas/groupingapi-v2.0-groups-post-put-request.json
      responses:
        200:
          body:
            example: !include examples/groupingapi-v2.0-group-get-200.json
        404:
    delete:
      description: Delete a Group
      responses:
        204:

/packages:
  displayName: Packages
  get:
    description: List Packages
    queryParameters:
      query.rql:
        type: string
        example: query.rql=and(eq(resource_type,source),contains(tags.cameras,(cam_a,cam_b)))
        description: |
          A subset of the Resource Query Language.

          It is recommended that RQL be formatted in the normalised form as opposed to using FIQL syntax. (ie `lt(number,10)`, not `number=lt=10`)

          Where a given RQL operator is not implemented, the API responds with a 501.

      min_ts:
        type: string
        pattern: ^\\d+:\\d+
        description: filter by Packages with known min_ts
        example: min_ts=1457787633:123456789
      max_ts:
        type: string
        pattern: ^\\d+:\\d+
        example: max_ts=1457787655:0
        description: filter by Packages with known max_ts
      label:
        example: label=Sherlock%20S05E11
        type: string
        description: filter by package label
      description:
        type: string
        example: description=S01E11
        description: filter by group description
      tags:
        type: string
        example: tags.network=bbc_radio_one&tags.brand=annie_mac
        description: |
          Filter by group tags.
          Tags are key<string>: value<Array[string]> pairs.
      group_id:
        type: string
        example: group_id=2dc2f736-db06-11e5-b5d2-0a1d41d68578
        pattern: ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
        description: filter by group contained by package

    responses:
      200:
        body:
          example: !include examples/groupingapi-v2.0-packages-get-200.json
          schema: Packages

  post:
    description: Create a Package from a Group
    body:
      example: !include examples/groupingapi-v2.0-packages-post-put-request.json
      schema: !include schemas/groupingapi-v2.0-packages-post-put-request.json
    responses:
      201:
        body:
          example: !include examples/groupingapi-v2.0-package-get-200.json
        headers:
          Location:
            example: /groups/7c903667-7113-4a8f-8865-1c63f9070a9e
      400:

  /{packageId}:
    get:
      description: Get a single Package
      responses:
        200:
          body:
            example: !include examples/groupingapi-v2.0-package-get-200.json
            schema: Packages
        404:
    put:
      description: Update a Package
      body:
        example: !include examples/groupingapi-v2.0-packages-post-put-request.json
        schema: !include schemas/groupingapi-v2.0-packages-post-put-request.json
      responses:
        200:
          body:
            example: !include examples/groupingapi-v2.0-package-get-200.json
        404:
    delete:
      description: Delete a Package
      responses:
        204:
